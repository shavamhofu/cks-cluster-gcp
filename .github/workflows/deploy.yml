# name: Deploy GCP CKS Cluster

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:
#     inputs:
#       action:
#         description: 'Terraform action to perform (apply/destroy)'
#         required: true
#         default: 'destroy'
#         type: choice
#         options:
#           - apply
#           - destroy    

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
    
#     env:
#       TF_ACTION: ${{ github.event.inputs.action || 'destroy' }}

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Terraform
#       uses: hashicorp/setup-terraform@v3

#     - name: Authenticate to Google Cloud
#       uses: google-github-actions/auth@v2
#       with:
#         credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

#     - name: Setup SSH key
#       run: |
#         mkdir -p ~/.ssh
#         echo "$VM_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
#         chmod 600 ~/.ssh/id_rsa
#       env:
#         VM_SSH_PRIVATE_KEY: ${{ secrets.VM_SSH_PRIVATE_KEY }}  

#     - name: Terraform Init & Plan      
#       run: |
#         cd terraform
#         terraform init
#         # TF_LOG=DEBUG terraform apply -auto-approve
#         terraform plan -out=tfplan
       

#     - name: Terraform Init & Apply
#       if: env.TF_ACTION == 'apply'
#       run: |
#         cd terraform       
#         # TF_LOG=DEBUG terraform apply -auto-approve       
#         terraform apply -auto-approve tfplan

#     # - name: List Terraform files
#     #   run: ls -l

#     - name: Terraform Destroy
#       if: env.TF_ACTION == 'destroy'
#       run: |
#         cd terraform 
#         terraform init
#         terraform destroy -auto-approve

#       env:
#         GOOGLE_CREDENTIALS: ${{secrets.GCP_CREDENTIALS}}

#     # - name: Generate Ansible Inventory
#     #   if: env.TF_ACTION == 'apply'
#     #   run: bash scripts/generate_inventory.sh  

#     # - name: Add SSH host to known_hosts
#     #   if: env.TF_ACTION == 'apply'
#     #   run: |
#     #     ssh-keyscan -H $(awk '/master/ {print $1}' ansible/inventory.ini) >> ~/.ssh/known_hosts  
#     # - name: Add SSH host(s) to known_hosts
#     #   if: env.TF_ACTION == 'apply'
#     #   run: |
#     #     HOSTS=$(awk '/ansible_host|^([0-9]{1,3}\.){3}[0-9]{1,3}/ {print $1}' ansible/inventory.ini)
#     #     if [ -z "$HOSTS" ]; then
#     #       echo "No hosts found in inventory.ini"
#     #       exit 1
#     #     fi

#     #     for host in $HOSTS; do
#     #       echo "Scanning $host"
#     #       ssh-keyscan -H "$host" >> ~/.ssh/known_hosts || echo "ssh-keyscan failed for $host"
#     #     done  

#     # - name: Test SSH connectivity
#     #   run: |
#     #     apt-get update && apt-get install -y inetutils-ping
#     #     ping -c 3 34.40.70.1
#     #     nc -zv 34.40.70.1 22 || echo "Port 22 unreachable"
#     # - name: Test SSH to master
#     #   if: env.TF_ACTION == 'apply'
#     #   run: ssh -o StrictHostKeyChecking=no ubuntu@$(awk '/master/ {print $1}' ansible/inventory.ini) hostname
#     - name: Check SSH Port Accessibility
#       if: env.TF_ACTION == 'apply'
#       run: |
#         sudo apt-get update && sudo apt-get install -y inetutils-ping netcat jq
#         PUBLIC_IPS=$(jq -r '.outputs.public_ips.value[]' terraform/terraform.tfstate)
#         for ip in $PUBLIC_IPS; do
#           echo "Pinging $ip"
#           ping -c 3 $ip || echo "$ip is unreachable"
#           echo "Checking SSH port"
#           nc -zv $ip 22 || echo "Port 22 unreachable on $ip"
#         done
#     - name: Scan SSH host keys
#       if: env.TF_ACTION == 'apply'
#       run: |
#         for ip in $(jq -r '.outputs.public_ips.value[]' terraform/terraform.tfstate); do
#           ssh-keyscan -H "$ip" >> ~/.ssh/known_hosts || echo "ssh-keyscan failed for $ip"
#         done

#     - name: Generate Ansible Inventory
#       if: env.TF_ACTION == 'apply'
#       run: bash scripts/generate_inventory.sh       

#     - name: Install Ansible
#       if: env.TF_ACTION == 'apply'
#       run: sudo apt-get install -y ansible

#     - name: Run Ansible Playbooks
#       if: env.TF_ACTION == 'apply'
#       run: |
#         cd ansible
#         export ANSIBLE_HOST_KEY_CHECKING=False
#         ansible-playbook -i inventory.ini master.yml -vvvv
#         export ANSIBLE_HOST_KEY_CHECKING=False
#         ansible-playbook -i inventory.ini worker.yml -vvvv

name: Deploy GCP CKS Cluster

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action (apply/destroy)'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TF_ACTION: ${{ github.event.inputs.action || 'apply' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "$VM_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
      env:
        VM_SSH_PRIVATE_KEY: ${{ secrets.VM_SSH_PRIVATE_KEY }}

    - name: Terraform Init & Plan
      run: |
        cd terraform
        terraform init
        terraform plan -out=tfplan

    - name: Terraform Apply
      if: env.TF_ACTION == 'apply'
      run: |
        cd terraform
        terraform apply -auto-approve tfplan

    - name: Terraform Destroy
      if: env.TF_ACTION == 'destroy'
      run: |
        cd terraform
        terraform destroy -auto-approve

    - name: Generate Ansible Inventory
      if: env.TF_ACTION == 'apply'
      run: bash scripts/generate_inventory.sh

    - name: Install Ansible & Utils
      if: env.TF_ACTION == 'apply'
      run: |
        sudo apt-get update
        sudo apt-get install -y ansible openssh-client inetutils-ping netcat-openbsd jq

    - name: Scan Host Keys
      if: env.TF_ACTION == 'apply'
      run: |
        HOSTS=$(awk '/ansible_host/ {print $2}' ansible/inventory.ini)
        for host in $HOSTS; do
          echo "Scanning $host"
          ssh-keyscan -H "$host" >> ~/.ssh/known_hosts || echo "ssh-keyscan failed for $host"
        done

    - name: Run Ansible Playbooks
      if: env.TF_ACTION == 'apply'
      run: |
        cd ansible
        export ANSIBLE_HOST_KEY_CHECKING=False
        ansible-playbook -i inventory.ini master.yml -vvvv
        ansible-playbook -i inventory.ini worker.yml -vvvv

